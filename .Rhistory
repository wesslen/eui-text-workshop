install.packages("quanteda")
install.packages("tm")
install.packages("dplyr")
install.packages("plyr")
tweets$panthers <- grepl('#KeepPounding|#Panthers', tweets$body, ignore.case=TRUE)
table(tweets$panthers)
panthers.tweets <- tweets[tweets$panthers==TRUE, ]
tweets <- read.csv("../datasets/CharlotteTweets20Sample.csv", stringsAsFactors=F)
tweets$panthers <- grepl('#KeepPounding|#Panthers', tweets$body, ignore.case=TRUE)
table(tweets$panthers)
panthers.tweets <- tweets[tweets$panthers==TRUE, ]
setwd("~/Dropbox/eui-text-workshop")
tweets <- read.csv("../datasets/CharlotteTweets20Sample.csv", stringsAsFactors=F)
tweets$panthers <- grepl('#KeepPounding|#Panthers', tweets$body, ignore.case=TRUE)
table(tweets$panthers)
panthers.tweets <- tweets[tweets$panthers==TRUE, ]
tweets <- read.csv("./datasets/CharlotteTweets20Sample.csv", stringsAsFactors=F)
tweets$panthers <- grepl('#KeepPounding|#Panthers', tweets$body, ignore.case=TRUE)
table(tweets$panthers)
panthers.tweets <- tweets[tweets$panthers==TRUE, ]
twcorpus <- corpus(panthers.tweets$body)
collocations(twcorpus, size = 2, method = "all")
library(quanteda)
twcorpus <- corpus(panthers.tweets$body)
collocations(twcorpus, size = 2, method = "all")
twdfm <- dfm(twcorpus, ignoredFeatures=c(
stopwords("english"), "t.co", "https", "rt", "amp", "http", "t.c", "can"), ngrams=c(1,2))
# term similarities
sim <- similarity(twdfm, c("panthers", "cam"), margin="features", method="cosine")
head(sim$panthers, n=20)
head(sim$cam, n=20)
twdfm <- trim(twdfm, minCount=5, minDoc=2)
# hierarchical clustering - get distances on normalized dfm
pantDistMat <- dist(as.matrix(weight(twdfm, "relFreq")))
# hiarchical clustering the distance object
pantCluster <- hclust(pantDistMat)
# plot as a dendrogram
plot(pantCluster)
twdfm <- trim(twdfm, minCount=10, minDoc=10)
# hierarchical clustering - get distances on normalized dfm
pantDistMat <- dist(as.matrix(weight(twdfm, "relFreq")))
# hiarchical clustering the distance object
pantCluster <- hclust(pantDistMat)
# plot as a dendrogram
plot(pantCluster)
?plot
?plot.dfm
plot(pantCluster)
wordDfm <- sort(weight(twdfm, "tfidf"))
wordDfm <- t(wordDfm)[1:100,]  # because transposed
wordDistMat <- dist(wordDfm)
wordCluster <- hclust(wordDistMat)
plot(wordCluster, xlab="", main="tf-idf Frequency weighting")
twdfm <- dfm(twcorpus, ignoredFeatures=c(
stopwords("english"), "t.co", "https", "rt", "amp", "http", "t.c", "can"), ngrams=c(1,1))
# term similarities
sim <- similarity(twdfm, c("panthers", "cam"), margin="features", method="cosine")
head(sim$panthers, n=20)
head(sim$cam, n=20)
twdfm <- trim(twdfm, minCount=10, minDoc=10)
# hierarchical clustering - get distances on normalized dfm
pantDistMat <- dist(as.matrix(weight(twdfm, "relFreq")))
# hiarchical clustering the distance object
pantCluster <- hclust(pantDistMat)
# plot as a dendrogram
plot(pantCluster)
pantDistMat <- dist(as.matrix(weight(twdfm, "tfidf")))
# hiarchical clustering the distance object
pantCluster <- hclust(pantDistMat)
# plot as a dendrogram
plot(pantCluster)
wordDfm <- sort(weight(twdfm, "tfidf"))
wordDfm <- t(wordDfm)[1:100,]  # because transposed
wordDistMat <- dist(wordDfm)
wordCluster <- hclust(wordDistMat)
plot(wordCluster, xlab="", main="tf-idf Frequency weighting")
wordDfm <- sort(weight(twdfm, "tfidf"))
wordDfm <- t(wordDfm)[1:100,]
twdfm <- dfm(twcorpus, ignoredFeatures=c(
stopwords("english"), "t.co", "https", "rt", "amp", "http", "t.c", "can"), ngrams=c(1,1))
# term similarities
sim <- similarity(twdfm, c("panthers", "cam"), margin="features", method="cosine")
head(sim$panthers, n=20)
head(sim$cam, n=20)
twdfm <- trim(twdfm, minCount=5, minDoc=3)
# hierarchical clustering - get distances on normalized dfm
pantDistMat <- dist(as.matrix(weight(twdfm, "relFreq")))
# hiarchical clustering the distance object
pantCluster <- hclust(pantDistMat)
# plot as a dendrogram
plot(pantCluster)
rownames(pantCluster) <- ""
rownames(pantCluster) <- " "
pantCluster$labels <- " "
plot(pantCluster)
pantCluster <- hclust(pantDistMat)
length(pantCluster$labels)
xx <- vector(mode="character", length=length(pantCluster$labels))
pantCluster$labels <- vector(mode="character", length=length(pantCluster$labels))
plot(pantCluster)
wordDfm <- sort(weight(twdfm, "tfidf"))
wordDfm <- t(wordDfm)[1:100,]  # because transposed
wordDistMat <- dist(wordDfm)
wordCluster <- hclust(wordDistMat)
plot(wordCluster, xlab="", main="tf-idf Frequency weighting")
wordDfm <- sort(weight(twdfm, "tfidf"))
wordDfm <- t(wordDfm)[1:50,]  # because transposed
wordDistMat <- dist(wordDfm)
wordCluster <- hclust(wordDistMat)
plot(wordCluster, xlab="", main="tf-idf Frequency weighting")
sim <- similarity(twdfm, c("panthers", "@sportscenter"), margin="features", method="cosine")
head(sim$panthers, n=20)
head(sim$@sportscenter, n=20)
